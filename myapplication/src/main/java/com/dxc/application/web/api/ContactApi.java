/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dxc.application.web.api;

import com.dxc.application.web.api.model.ContactPrivacyUpdateByEmail;
import com.dxc.application.web.api.model.ContactPrivacyUpdateByLocator;
import com.dxc.application.web.api.model.ContactRelationshipCreate;
import com.dxc.application.web.api.model.LookupRequest;
import com.dxc.application.web.api.model.Request;
import com.dxc.application.web.api.model.Response;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-04-23T10:17:27.113+05:30")

@Api(value = "contact", description = "the contact API")
public interface ContactApi {

    @ApiOperation(value = "Updates the privacy by email", notes = "Updates the privacy by email", response = ContactPrivacyUpdateByEmail.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ContactPrivacyUpdateByEmail.class),
        @ApiResponse(code = 400, message = "Invalid Data", response = Void.class) })
    
    @RequestMapping(value = "/contact/privacy/update/locator/email",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ContactPrivacyUpdateByEmail> contactPrivacyUpdateByEmail(@ApiParam(value = "Update the contact privacy by email" ,required=true )  @Valid @RequestBody ContactPrivacyUpdateByEmail body) {
        // do some magic!
        return new ResponseEntity<ContactPrivacyUpdateByEmail>(HttpStatus.OK);
    }


    @ApiOperation(value = "Updates the privacy by telephone", notes = "Updates the privacy by telephone", response = ContactPrivacyUpdateByLocator.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ContactPrivacyUpdateByLocator.class),
        @ApiResponse(code = 400, message = "Invalid Data", response = Void.class) })
    
    @RequestMapping(value = "/contact/privacy/update/locator/telephone",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ContactPrivacyUpdateByLocator> contactPrivacyUpdateByLocator(@ApiParam(value = "Update the contact privacy by telephone" ,required=true )  @Valid @RequestBody ContactPrivacyUpdateByLocator body) {
        // do some magic!
        return new ResponseEntity<ContactPrivacyUpdateByLocator>(HttpStatus.OK);
    }


    @ApiOperation(value = "Creates a new user", notes = "Creates a new contact", response = Response.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Response.class) })
    
    @RequestMapping(value = "/contact/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Response> create(@ApiParam(value = "Contact Parameters" ,required=true )  @Valid @RequestBody Request body) {
        // do some magic!
        return new ResponseEntity<Response>(HttpStatus.OK);
    }


    @ApiOperation(value = "Creates a contactrelationship", notes = "Creates a contactrelationship", response = ContactRelationshipCreate.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ContactRelationshipCreate.class),
        @ApiResponse(code = 201, message = "Contact Relationship Created Successfully", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid Data", response = Void.class) })
    
    @RequestMapping(value = "/contact/relationship/create",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ContactRelationshipCreate> createContactRelationship(@ApiParam(value = "contactrelationship Parameters" ,required=true )  @Valid @RequestBody ContactRelationshipCreate body) {
        // do some magic!
        return new ResponseEntity<ContactRelationshipCreate>(HttpStatus.OK);
    }


    @ApiOperation(value = "Lookup for contact", notes = "Lookup for contact with compose id", response = Void.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class) })
    
    @RequestMapping(value = "/contact/lookup",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> lookup(@ApiParam(value = "Contact Parameters" ,required=true )  @Valid @RequestBody LookupRequest body,@ApiParam(value = "Return only privacy content", allowableValues = "N, Y", defaultValue = "N") @RequestParam(value = "privacy", required = false, defaultValue="N") String privacy) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }


    @ApiOperation(value = "Find contact by id", notes = "Returns a contact", response = Void.class, tags={ "Contacts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 400, message = "invalid Id supplied", response = Void.class),
        @ApiResponse(code = 404, message = "pet not found", response = Void.class) })
    
    @RequestMapping(value = "/contact/lookup/{mdmContactID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Void> lookupById(@ApiParam(value = "Id of contact to return",required=true ) @PathVariable("mdmContactID") Long mdmContactID,@ApiParam(value = "Return only privacy content", allowableValues = "N, Y", defaultValue = "N") @RequestParam(value = "privacy", required = false, defaultValue="N") String privacy) {
        // do some magic!
        return new ResponseEntity<Void>(HttpStatus.OK);
    }

}
